generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id               String             @id @default(cuid())
  dateCreated      DateTime           @default(now()) @map("date_created")
  username         String             @unique
  password         String
  firstName        String             @map("first_name")
  lastName         String             @map("last_name")
  routines         Routine[]
  sessions         Session[]
  workouts         Workout[]
  completedSession CompletedSession[]
  activeSession    ActiveSession[]
  userPreferences  UserPreference[]

  @@map("user")
}

model Routine {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  name        String    @unique
  description String?
  isActive    Boolean   @default(false) @map("is_active")
  sessions    Session[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")

  @@map("routine")
}

model Session {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now()) @map("created_at")
  name             String
  description      String?
  workouts         Workout[]
  routine          Routine?            @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId        String?             @map("routine_id")
  days             SessionDaysActive[]
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String              @map("user_id")
  completedSession CompletedSession[]
  activeSession    ActiveSession[]

  @@map("session")
}

model SessionDaysActive {
  id        String  @id @default(cuid())
  day       String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String  @map("session_id")

  @@map("session_days_active")
}

model Workout {
  id                         String   @id @default(cuid())
  reps                       Int
  sets                       Int
  weightLbs                  Int
  isCompletedOnActiveSession Boolean  @default(false) @map("is_completed_on_active_session")
  exercise                   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId                 String   @map("exercise_id")
  session                    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId                  String   @map("session_id")
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String   @map("user_id")

  @@map("workout")
}

model Exercise {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.VarChar(300)
  isAerobic   Boolean   @default(false) @map("is_aerobic")
  workouts    Workout[]

  @@map("exercise")
}

model ActiveSession {
  id        String   @id @default(cuid())
  startedAt DateTime @default(now()) @map("started_at")
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String   @map("session_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("active_session")
}

// TODO: Add a field that holds minutes and seconds for thd duration of the sesssion
model CompletedSession {
  id                  String   @id @default(cuid())
  startedAt           DateTime @map("started_at")
  completedAt         DateTime @default(now()) @map("completed_at")
  percentageCompleted Int      @map("percentage_completed")
  session             Session  @relation(fields: [sessionId], references: [id])
  sessionId           String   @map("session_id")
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String   @map("user_id")

  @@map("completed_session")
}

model UserPreference {
  id         String     @id @default(cuid())
  preference Preference @map("preference")
  enabled    Boolean    @default(true)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String     @map("user_id")

  @@map("user_preference")
}

enum Preference {
  CONFETTI_ON_SESSION_COMPLETION
}
